# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:54:53+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path

from models import (
    CancelGiftCardTransactionRequest,
    CreateGiftCardRequest,
    CreateGiftCardTransactionRequest,
    GetGiftCardusingJSONRequest,
    GiftcardsGiftCardIDTransactionsGetResponse,
    GiftcardsGiftCardIDTransactionsTransactionIDCancellationsGetResponse,
    GiftcardsGiftCardIDTransactionsTransactionIDSettlementsGetResponse,
    Response,
    Response2,
    Response3,
    Response5,
    Response6,
    SettleGiftCardTransactionRequest,
)

app = MCPProxy(
    contact={},
    description=">ℹ️ Onboarding guide\r\n>\r\n> Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.\r\n\r\nThe Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.\r\n\r\n> ⚠ A Gift Card works as a **payment method**, not a promotion.",
    title='GiftCard API',
    version='1.0',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX server url',
            'url': 'https://{accountName}.{environment}.com.br/api/',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Name of the VTEX account. Used as part of the URL',
                },
                'environment': {
                    'default': '{environment}',
                    'description': 'Environment to use. Used as part of the URL.',
                },
            },
        },
    ],
)


@app.post(
    '/giftcards',
    description=""" Creates a GiftCard for a specific user """,
    tags=['gift_card_creation_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_gift_card(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    x__v_t_e_x__a_p_i__app_key: str = Header(..., alias='X-VTEX-API-AppKey'),
    x__v_t_e_x__a_p_i__app_token: str = Header(..., alias='X-VTEX-API-AppToken'),
    body: CreateGiftCardRequest = ...,
):
    """
    Create GiftCard
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/giftcards/_search',
    description=""" Returns the giftcards based on the cart data. """,
    tags=['gift_card_creation_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_gift_cardusing_j_s_o_n(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    r_e_s_t__range: Optional[str] = Header('giftcard=0-49', alias='REST-Range'),
    body: GetGiftCardusingJSONRequest = ...,
):
    """
    Get GiftCard using JSON
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/giftcards/{giftCardID}',
    description=""" Returns associated data for a specified giftcardId. """,
    tags=['gift_card_creation_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_gift_cardby_i_d(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
):
    """
    Get GiftCard by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/giftcards/{giftCardID}/transactions',
    description=""" Returns all transaction of a giftcard. """,
    tags=['gift_card_transaction_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_gift_card_transactions(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
):
    """
    Get GiftCard Transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/giftcards/{giftCardID}/transactions',
    description=""" Register a new giftcard transaction and authorize the item reservation. """,
    tags=['gift_card_transaction_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_gift_card_transaction(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    body: CreateGiftCardTransactionRequest = None,
):
    """
    Create GiftCard Transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/giftcards/{giftCardID}/transactions/{transactionID}',
    tags=['gift_card_transaction_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_gift_card_transactionby_i_d(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    transaction_i_d: str = Path(..., alias='transactionID'),
):
    """
    Get GiftCard Transaction by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/giftcards/{giftCardID}/transactions/{transactionID}/authorization',
    description=""" Returns the giftcard transaction authorizations. """,
    tags=['gift_card_transaction_auth', 'gift_card_transaction_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_transaction_authorizations(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    transaction_i_d: str = Path(..., alias='transactionID'),
):
    """
    Get Transaction Authorizations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/giftcards/{giftCardID}/transactions/{transactionID}/cancellations',
    description=""" Returns the giftcard transaction cancellations. """,
    tags=['gift_card_transaction_management', 'gift_card_transaction_auth'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_transaction_cancellations(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    transaction_i_d: str = Path(..., alias='transactionID'),
):
    """
    Get Transaction Cancellations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/giftcards/{giftCardID}/transactions/{transactionID}/cancellations',
    description=""" Creates a cancellation in the transaction. Cancel a item reservation or create a refund. """,
    tags=['gift_card_transaction_management', 'gift_card_transaction_auth'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def cancel_gift_card_transaction(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    transaction_i_d: str = Path(..., alias='transactionID'),
    body: CancelGiftCardTransactionRequest = ...,
):
    """
    Cancel GiftCard Transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/giftcards/{giftCardID}/transactions/{transactionID}/settlements',
    description=""" Returns the giftcard transaction settlements. """,
    tags=['gift_card_transaction_management', 'gift_card_transaction_auth'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_transaction_settlements(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    transaction_i_d: str = Path(..., alias='transactionID'),
):
    """
    Get Transaction Settlements
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/giftcards/{giftCardID}/transactions/{transactionID}/settlements',
    description=""" Creates a giftcard transaction settlement. """,
    tags=['gift_card_transaction_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def settle_gift_card_transaction(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    gift_card_i_d: str = Path(..., alias='giftCardID'),
    transaction_i_d: str = Path(..., alias='transactionID'),
    body: SettleGiftCardTransactionRequest = ...,
):
    """
    Settle GiftCard Transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
