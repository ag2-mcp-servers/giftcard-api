# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:54:53+00:00

from __future__ import annotations

from decimal import Decimal
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class CancelGiftCardTransactionRequest(BaseModel):
    requestId: str
    value: float


class Client(BaseModel):
    document: str
    email: str
    id: str


class ClientProfile(BaseModel):
    birthDate: str
    document: str
    email: str
    firstName: str
    isCorporate: bool
    lastName: str
    phone: str


class CreateGiftCardRequest(BaseModel):
    caption: str = Field(
        ..., description='The caption of the Giftcard.', examples=['rewards program']
    )
    expiringDate: str = Field(
        ...,
        description='It must be in the format `YYYY-MM-DDThh:mm:ss.fff`.',
        examples=['2020-09-01T13:15:30Z'],
    )
    multipleCredits: Optional[bool] = Field(
        None, description='The Giftcard balance can be changed.', examples=[False]
    )
    multipleRedemptions: Optional[bool] = Field(
        None,
        description='The Giftcard can be used to make new purchases until its value is completely used.',
        examples=[False],
    )
    profileId: str = Field(..., description="The client's ID.", examples=['1234'])
    relationName: str = Field(
        ...,
        description='Represents the relationship between the client and the store.',
        examples=['insert example here'],
    )
    restrictedToOwner: Optional[bool] = Field(
        None,
        description="The Giftcard can only be used for a specified client's ID.",
        examples=[False],
    )


class Item(BaseModel):
    id: str
    name: str
    price: int
    productId: str
    quantity: int
    refId: str


class Paging(BaseModel):
    page: int
    pages: int
    perPage: int
    total: int


class PriceTag(BaseModel):
    name: str
    value: int


class Self(BaseModel):
    href: str


class SettleGiftCardTransactionRequest(BaseModel):
    requestId: str
    value: float


class Shipping(BaseModel):
    city: str
    complement: str
    country: str
    neighborhood: str
    number: str
    postalCode: str
    receiverName: str
    reference: str
    state: str
    street: str


class Transactions(BaseModel):
    href: str


class Response(BaseModel):
    balance: int
    caption: str
    emissionDate: str
    expiringDate: str
    id: str
    redemptionCode: str
    redemptionToken: str
    relationName: str
    transactions: Transactions


class Response3(BaseModel):
    field_self: Self = Field(..., alias='_self')
    id: str


class Response5(BaseModel):
    date: str
    description: str
    redemptionMode: str
    value: float


class Response6(BaseModel):
    date: str
    oid: str
    value: float


class Response7(BaseModel):
    date: str
    id: str
    value: float


class GiftcardsGiftCardIDTransactionsGetResponse(RootModel[List[Response3]]):
    root: List[Response3]


class GiftcardsGiftCardIDTransactionsTransactionIDCancellationsGetResponse(
    RootModel[List[Response7]]
):
    root: List[Response7]


class GiftcardsGiftCardIDTransactionsTransactionIDSettlementsGetResponse(
    RootModel[List[Response6]]
):
    root: List[Response6]


class Cart(BaseModel):
    discounts: int
    grandTotal: float
    items: List[Item] = Field(..., description='')
    itemsTotal: int
    redemptionCode: str
    relationName: str
    shipping: int
    taxes: int


class GetGiftCardusingJSONRequest(BaseModel):
    cart: Cart
    client: Client


class Item1(BaseModel):
    field_self: Self = Field(..., alias='_self')
    id: str


class Item2(BaseModel):
    discount: float
    id: str
    name: str
    price: float
    priceTags: List[PriceTag] = Field(..., description='')
    productId: str
    quantity: int
    refId: str
    shippingDiscount: int
    value: float


class Response2(BaseModel):
    items: List[Item1] = Field(..., description='')
    paging: Paging


class Cart1(BaseModel):
    discounts: float
    grandTotal: int
    items: List[Item2] = Field(..., description='')
    itemsTotal: float
    shipping: float
    taxes: int


class OrderInfo(BaseModel):
    cart: Optional[Cart1] = None
    clientProfile: Optional[ClientProfile] = None
    orderId: Optional[str] = 'v5006'
    sequence: Optional[int] = 5006128
    shipping: Optional[Shipping] = None


class CreateGiftCardTransactionRequest(BaseModel):
    description: str
    operation: str
    orderInfo: Optional[OrderInfo] = None
    redemptionCode: str
    redemptionToken: str
    requestId: str
    value: Decimal
